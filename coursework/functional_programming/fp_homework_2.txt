3.1

    instance Ord a => Ord [a] where
        [] <= _          = True
        _ <= []          = False
        (x:xs) <= (y:ys) = if x /= y then x <= y else xs <= ys


-------------------------------------------------------------------------------


For all next to come, I am going to assume x :: x0, y :: y0.

3.2

    h x y = f (g x y) 

    Where,

        h :: x0 -> y0 -> a
        g :: x0 -> y0 -> b
        f :: b  -> a

    1. h ?= f . g 
    
    We know that in order for f . g to make sense, the co-domain of g and the
    domain of f need to correspond:

        y0 -> b == b
    
    We see that b is defined in terms of itself, so it must be badly typed,
    therefore h != f . g

    2. h x ?= f . g x

    By the definitions:
        
        h x y = f (g x y)

    or
        
        h x y = f ((g x) y) = f . (g x) y = f . g x y

    Therefore, by reduction,
        
        h x = f . g x

    3. h x y ?= (f . g) x y

    For this to hold, by reduction, the following should also hold:
    
        h = (f . g)

    Which we know does not (from 1.), so h x y != (f . g) x y
    

-------------------------------------------------------------------------------


3.3

    >   subst f g x = (f x) (g x)
     
        f :: x0 -> a
        g :: x0 -> b
        a == b  -> c

    So,
    
        f :: x0 -> b -> c

    So,

        subst :: (x0 -> b -> c) -> (x0 -> b) -> x0 -> c 


    >   fix f = f (fix f)

        f :: f0
        fix :: a
        fix f :: b
        f (fix x) :: b

    Then,
     
        a = f0 -> b
        f0 = b -> b
        
    So,
        
        f :: b -> b
        fix :: (b -> b) -> b

    >   twice f = f . f
    
    Since a is composable with itself, then:

        f :: a -> a

    So, since f . f :: a -> a, 
       
        twice :: (a -> a) -> (a -> a)


-------------------------------------------------------------------------------


3.4

    1. [] : xs = xs
    
        xs :: [a]
    
    The equation DOESN'T HOLD since the lenght of xs is bound to increase by
    appending [] to its front.


    2. [] : xs = [[], xs]

        xs :: [a]

    But also, since the type of [] : xs is [a] and the types of both sides
    need to be equal, we can infer that the type of [[], xs] needs to be
    [a]. But a list of [a] can not have its second element to be [a], so the
    expression outght to be BADLY TYPED.


    3. xs : [] = xs

        xs : [] = [xs]

    So our equation is the same as saying:
        
        [xs] = xs


    Which is BADLY TYPED, since letting:

        xs :: a

    Would mean that [a] = a, which can't be.


    4. xs : [] = [xs]

        xs :: a (judging by the names this should have been [a])

    The equation trivially HOLDS, being the definition of (:).


    5. xs : xs = [xs, xs]

        xs :: a

    In order for xs : xs to make sense it should have been that [a] = a, so the
    expression is BADLY TYPED.


    6. xs : [xs] = [xs, xs]

        xs :: a


    The expression trivially HOLDS by the definition of (:).

    7. [[]] ++ xs = xs

        xs :: [[a]]

    But, the expression DOESN'T HOLD, since concatenating a list of one element
    with another list increases the length of the second list, so it may not be
    equal to former version.


    8. [[]] ++ xs = [xs]

    In order for this to hold the types of xs and [xs] would need to be the
    same, this common type being recursive. Thus, the equation is BADLY TYPED.


    9. [[]] ++ xs == [[], xs]

    In order for this to hold, the types of xs and [[], xs] would need to be
    the same, or that the types of xs and [xs] would be the same, which is
    clearly nonsense. So, the equation is BADLY TYPED.


    10. [[]] ++ [xs] = [[], xs]

    Since the types of [] and xs need to be equal:
    
        xs :: [a]

    The equation trivially HOLDS by the definition of (++).


    11. [xs] ++ [] = [xs]

        xs :: a

    The equation trivially HOLDS by the definition of (++).


    12. [xs] ++ [xs] == [xs, xs]
    
    The only restriction is that [xs], [xs] and [xs, xs] are of the same type,
    which they surely are, so:

        xs :: a
    
    Also, the expression trivially holds, by definition.
    

-------------------------------------------------------------------------------


4.1
    Assuming f and g are strict functions, then f bottom == g bottom == bottom.
    (f . g) bottom == f (g bottom) == f bottom == bottom, and thus, by
    definition f . g ought to be strict.

    However, take f x = bottom and g x = 1, thus (f . g) x == f (g bottom) ==
    f 1 = bottom, thus f . g is strict although g is not strict.

4.2
    There are a total of 3^3 = 27 such functions.

    Let f :: Bool -> Bool be a computable function.
    Then, f can do one of following:
    
        1. Either be a constant function. There are 3 such functions, one for
        every one of the three fundamental bool values.
        2. Or, it can look at its input, therefore being strict. Fixing in
        place f bottom = bottom there are 3^2 = 9 options left for f False and
        f True.

    Thus, by noting that there is exactly one strict type (1) function, namely
    f x = bottom, and that there are no other overlapping, we can conclude that
    there are 3 + 9 - 1 = 12 - 1 = 11 such computable functions f.

    All of them are implementable in Haskell due to the Turing Complete
    nature of the language.


-------------------------------------------------------------------------------


4.3

    About (&&):
        
        x         |  y         |  x && y
        -----------------------------------
        True      && undefined == undefined
        False     && undefined == False
        undefined && True      == undefined
        undefined && False     == undefined
        undefined && undefined == undefined

    The only way False && undefined == False is that y is not evaluated in the
    initial phase, so the following definition implements (&&):

        False && _     = False
        _     && False = False
        True  && True  = True
    


    About (&&&):
   
    If we let x evaluate before y, the second condition won't hold. If we let
    y evaluate before x, the first condition won't hold. So, x and y need to be
    evaluated in parallel. Consider two additional processes, evaluating x and
    y, respectively, and returning as soon as soon as possible. In case one of
    the child processes returns False, then the master process would stop the
    other and return False. Otherwise, if both processes returned True, then
    the master returns True. This way, because three conditions are
    order-independent and non-overlapping, as well as not undefined whenever
    the given condition is satisfied, whenever one of the three conditions is
    satisfied, the function indeed returns the correct answer.

    For the remaining 3 cases: undefined &&& True, True &&& undefined and
    undefined &&& undefined we can prove that the function ought to return
    undefined.

    Given (&&&) is computable:
    Let <= denote the approximation ordering:
    
        undefined <= True
        True      <= True
        False     <= True

    Because (&&&) is computable:

        f undefined True       <= f True True  == True
        f undefined False      <= f True False == False
        f True      undefined  <= f True True  == True
        f True      undefined  <= f True False == False
        f undefined undefined  <= f True True  == True
        f undefined undefined  <= f True False == False

    Thus,

        f undefined True      <= both True and False
        f True undefined      <= both True and False
        f undefined undefined <= both True and False

    So,

        f undefined True == f True undefined == f undefined undefined == undefined

    This function is, indeed, implementable in Haskell due to its Turing
    Completeness, but not in a pure manner.


-------------------------------------------------------------------------------


4.4

    import Data.Char
    
    song 0 = ""
    song n = song(n - 1) ++ "\n" ++ verse n
    
    verse n = capitalize (line1 n) ++ line ++ capitalize (line3 n) ++ line
    
    numbers = ["zero men", "one man", "two men",   "three men", "four men",
               "five men", "six men", "seven men", "eight men", "nine men",
               "ten men"]
    
    line    = "Went to mow a meadow\n"
    line1 n = (numbers !! n) ++ " went to mow\n"
    line3 n = countDown   n  ++ " and his dog\n"
    
    countDown 1 = numbers !! 1
    countDown n = (numbers !! n) ++ ", " ++ countDown (n - 1)
    
    capitalize [] = []
    capitalize (x : xs) = toUpper x : xs


9.1

data Nat = Zero | Succ Nat

int :: Nat -> Int
int Zero     = 0
int (Succ n) = 1 + int n

nat :: Int -> Nat
nat 0 = Zero
nat n = Succ (nat (n - 1))

add a Zero     = a
add a (Succ b) = Succ (add a b)

mul a Zero     = Zero
mul a (Succ b) = add (mul a b) a

pow a Zero     = Succ Zero -- define 0^0 as 1
pow a (Succ b) = mul a (pow a b)

tet a Zero     = Succ Zero
tet a (Succ b) = pow a (tet a b)


-----------------------------------------------------


9.2


foldNat z s Zero   = z
foldNat z s (Succ n) = s $ foldNat z s n

foldNat Zero Succ = id


-----------------------------------------------------


10.1

fold n c (xs ++ ys) = fold (fold n c ys) c xs

Prove by induction on xs:


1. When xs = bottom,

fold n c (bottom ++ ys) = fold (fold n c ys) c bottom

<=> {(++ys) is strict}

fold n c bottom = (fold (fold n c ys) c) bottom

<=> {fold a b is strict}

bottom = bottom 


2. When xs = [],

fold n c ([] ++ ys) = fold (fold n c ys) c []

<=> {[] ++ ys = ys, by definition}

fold n c ys = fold (fold n c ys) c []

<=> {by definition of fold}

fold n c ys = fold n c ys


3. When xs = x : xs,

fold n c ((x : xs) ++ ys) = fold (fold n c ys) c (x : xs)

<=> {(x : xs) ++ ys = x : (xs ++ ys), by definition}

fold n c (x : (xs ++ ys)) = fold (fold n c ys) c (x : xs)

<=> {by definition of fold}

c x (fold n c (xs ++ ys)) = c x (fold (fold n c ys) xs)

<=> {by the induction hypothesis}

c x (fold n c (xs ++ ys)) = c x (fold n c (xs ++ ys))


-----------------------------------------------------


10.2

It is required that:

(++bs) as = foldr f e as

<=> {swapping the sides}
foldr f e as = (++bs) as

<=> {as foldr (:) [] is the identity on lists}
foldr f e as = (++bs) (foldr (:) [] as)

This would easily hold true by the fold fusion theorem if:


1. (++bs) bottom = bottom

<=>
bottom ++ bs = bottom {trivially true by definition of (++)}


2. (++bs) [] = e

<=>
[] ++ bs = e

<=> {by definition of (++)}
bs = e


3. (++bs) . ((:) x) ==  (f x) . (++bs)

<=> {definition of (x:)}
(++bs) . (x:) == (f x) . (++bs)

<=> {extensionality}
((++bs) . (x:)) as == ((f x) . (++bs)) as, for every as

<=> {definition of (.)}
(++bs) (x : as) == (f x) ((++bs) as)

<=> {definition of (++bs)}
(x : as) ++ bs == (f x) (as ++ bs)

<=> {definition of (:)}

x : (as ++ bs) == (f x) (as ++ bs), for every as

<=> {extensionality}
(x:) = f x

<=> {definition of (x:)}
(:) x = f x

<=> {extensionality}
f = (:)


Thus, by setting f = (:) and e = bs, the fold fusion theorem tells us that:

foldr (:) bs as = (++bs) (foldr (:) [] as) = (++bs) as

So, (++bs) = foldr (:) bs, thus (++bs) is a fold, as required.


Now, let's show that:

fold n c (xs ++ ys) = fold (fold n c ys) c xs

<=> {as (++ys) = foldr (:) ys}
(fold n c) (foldr (:) ys xs) = fold (fold n c ys) c xs

This would easily hold true by the fold fusion theorem if:

1. fold n c bottom = bottom, obviously true, by strictness of fold n c

2. fold n c ys = fold n c ys, obviously true

3. (fold n c) . ((:) x) = (c x) . (fold n c)

<=>
(fold n c) . (x:) = (c x) . (fold n c)

<=> {by extensionality}
((fold n c) . (x:)) as = ((c x) . (fold n c)) as, for all as

<=> {by definition of (.)}
fold n c (x : as) = c x (fold n c as), which is the definition of a
				       general fold, so it must hold true.


Thus, by the fold fusion theorem, we have that:

fold n c (xs ++ ys) = fold (fold n c ys) c xs,

which is exactly what we wanted to prove.


-----------------------------------------------------


10.3

filter f = fold e h

<=>
(filter f) . id = fold e h

<=> (filter f) . (fold [] (:)) = fold e h

<=> {by extensionality and definition of (.)}
(filter f) (fold [] (:) as) = fold e h as

This would easily hold true by the fold fusion theorem if:

1. filter f bottom = bottom (obviously true by strictness of filter f)

2. filter f [] = e <=> e = []

3. (filter f) . ((:) x) = (h x) . (filter f), for all x

<=> {by definition of (:), extensionality and definiition of (.)}
filter f ((x:) as) = h x (filter f as)

<=> {by definition of (x:)}
filter f (x : as) = h x (filter f as)

Let h x xs = if f x
	     then x : xs
	     else xs

For this h, we can continue and write:

<=> {by definition of h}
filter f (x : as) = if f x
		    then x : (filter f as)
		    else filter (f as)

But this is nothing else than the definition of filter.


So, by the fold fusion theorem, we have that:

filter f = fold [] h
	   where h x xs = if f x then x : xs else xs


Now, let's deduce that:

filter p (xs ++ ys) = filter p xs ++ filter p ys

<=> {as filter p = fold [] h, for h defined above, with p instead of f}
fold [] h (xs ++ ys) = fold [] h xs ++ fold [] h ys

There is a theorem for relations of this type, namely:

If (for an arbitrarily defined +, not necesarily the standard one):
1. n + x = x
2. bottom + x = bottom
3. (x `c` y) + z = x `c` (y + z)
Then fold n c (xs ++ ys) = fold n c xs + fold n c ys

In our case n = [] and c = h the theorem's conditions become:

1. [] ++ xs = xs, true by definition 
2. bottom ++ xs = bottom, true by strictness of (++xs)
3. (x `h` ys) ++ zs = x `h` (ys ++ zs)

<=>
(h x ys) ++ zs = h x (ys ++ zs)

<=> {by definition of h}
(if p x then x : ys else ys) ++ zs = if p x then x : (ys ++ zs) else (ys ++ zs) 

Now, there are 2 cases to consider:

1. p x is True:
(if p x then x : ys else ys) ++ zs = if p x then x : (ys ++ zs) else (ys ++ zs) 
<=>
(x : ys) ++ zs = x : (ys ++ zs), true by definition

2. px is False:
ys ++ zs = ys ++ zs, obviously true


-----------------------------------------------------


10.4

data Liste a = Lin | Snoc (Liste a) a

x `cat` Lin           = x
x `cat` (ys `Snoc` y) = (x `cat` ys) `Snoc` y

folde l s Lin           = l
folde l s (xs `Snoc` x) = (folde l s xs) `s` x

list     = folde []  (\xs x -> xs ++ [x])
liste xs = foldr (\x xs -> (Lin `Snoc` x) `cat` xs) Lin xs


Cl. When list is applied to an infinite Liste, it returns bottom.
Pf. It is enough to show it holds for partial lists, by chain-completeness:

Proceed by induction:


Base case: list is strict, as

list bottom = folde [] (\xs x -> xs ++ [x]) bottom <= folde [] (\xs x -> xs ++ [x]) Lin = []
						   <= folde [] (\xs x -> xs ++ [x]) (Lin `Snoc` 1) = [1]

So, list bottom <= [] and [1], thus it must be the case that list bottom = bottom.


Inductive step: Assuming list xs = bottom, let's show that list (xs `Snoc` x) = bottom:

list (xs `Snoc` x)

= {by definition of list}
folde []  (\xs x -> xs ++ [x]) (xs `Snoc` x)

= {by definition of folde}
(\xs x -> xs ++ [x]) (folde []  (\xs x -> xs ++ [x]) xs) x

=
(folde []  (\xs x -> xs ++ [x]) xs) ++ [x]

= {by definition of list}
list xs ++ [x]

= {by the ind. hypothesis}
bottom ++ [x]

= bottom

Thus completing the proof.


The infinite objects of type Liste are analogous
to infinite lists with known (accessible) end (head).


The standard function foldl has awfully inverted parameters,
so the two calls are asymetric:

list'     = revfolde [] (flip (:))
liste' ls = foldl Snoc Lin ls


-----------------------------------------------------


10.5

unfolde null head tail xs
   | null xs    = Lin
   | otherwise  = (unfolde null head tail (tail xs)) `Snoc` head xs

liste'' = unfolde null last init

Then,

nulle Lin = True
nulle _   = False

laste (Lin `Snoc` x) = x
laste (xs  `Snoc` x) = laste xs

inite (Lin `Snoc` x) = Lin
inite (xs  `Snoc` x) = inite xs `Snoc` x 

list'' ls = unfold nulle laste inite ls

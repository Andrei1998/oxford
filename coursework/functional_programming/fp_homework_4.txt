7.1

cp xss = foldr f [[]] xss
         where f xs rss = [x:rs | x <- xs, rs <- rss]


----------------------------------------------------------


7.2

cols' []       = cycle [[]]
cols' (xs:xss) = zipWith (:) xs (cols' xss)

cols'' xss     = foldr f (cycle [[]]) xss
                 where f xs rss = zipWith (:) xs rss


----------------------------------------------------------


7.3

foldrp f e (Wrap a)   = e a
foldrp f e (Pons a b) = f a (foldrp f e b)

pist [a]    = Wrap a
pist (x:xs) = Pons x (pist xs)

list (Wrap a)   = [a]
list (Pons a b) = a : list b

mapp f (Wrap a)   = Wrap (f a)
mapp f (Pons a b) = Pons (f a) (mapp f b)


(list . pist) ls = ls
(pist . list) ps = ps

Proof:

(list . pist) [a]      = list (pist [a])      = list (Wrap a) = [a]
(pist . list) (Wrap a) = pist (list (Wrap a)) = pist [a]      = Wrap a

(list . pist) (x:xs)   = list (pist (x:xs)) = list (Pons x (pist xs)) =
                       = x : list (pist xs) = x : xs, by the inductive hypothesis


(pist . list) (Pons a b) = pist (list (Pons a b)) = pist (a : list b) =
                         = Pons a (pist (list b)) = Pons a b, by the inductive hypothesis

Derivation of fold1:

fold1  wrap cons [a] 		 =
foldrp wrap cons . pist [a]      = foldrp wrap cons (pist [a])      = foldrp wrap cons (Wrap a)
				 = wrap a

fold1 wrap cons (x : xs)         =
foldrp wrap cons . pist (x : xs) = foldrp wrap cons (pist (x : xs)) = foldrp wrap cons (Pons x (pist xs))
				 = cons x (foldrp wrap cons (pist xs)) = cons x (fold1 wrap cons xs)

So, the accurate recursive definition of fold1 is

fold1 wrap cons [a] 		 = wrap a
fold1 wrap cons (x : xs)         = cons x (fold1 wrap cons xs)

Last two questions:

foldr1 f        = fold1  f id

You CAN'T write fold1 cons wrap as an instance of foldr1, counterexample:
fold1 (+) (const 0) can't be written as an instance of foldr1
because if it could have been for some function f, by extensionality:

fold1 (+) (const 0) [1] = foldr1 f [1]

or,

0 = 1, which is of course false


Thus, fold1 f CAN NOT be written as an instance of foldr1.


----------------------------------------------------------


8.1 

Without trimming:

ljustify1 0 ls     = ls
ljustify1 n (x:xs) = x   : ljustify1 (n - 1) xs
ljustify1 n _      = ' ' : ljustify1 (n - 1) []
rjustify1 n ls = reverse (ljustify1 n (reverse ls))

With trimming:

ljustify2 0 _      = []
ljustify2 n (x:xs) = x   : ljustify2 (n - 1) xs
ljustify2 n _      = ' ' : ljustify2 (n - 1) []
rjustify2 n ls = take n (reverse (ljustify1 n (reverse ls)))


----------------------------------------------------------


8.2

scale a m = map (map (*a)) m

dot v1 v2 = sum (zipWith (*) v1 v2)

add a b   = zipWith (zipWith (+)) a b

mul a b   = [[dot vi vj| vj <- b'] |  vi <- a]
          where b' = transpose b

table m   = concat xx
            where mm  = map (map show) m 
                  mmm = map (map length) mm          
                  l   = foldr1 (zipWith max) mmm
                  v   = map shorten mm
                  x   = map (foldr1 (\a b -> a ++ " " ++ b)) v
                  xx  = map (++"\n") x
                  shorten v = zipWith (\word just -> rjustify1 just word) v l

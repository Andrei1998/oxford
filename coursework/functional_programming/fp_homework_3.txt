5.1

mytake 0 _      = []
mytake _ []     = []
mytake n (x:xs) = x : mytake (n - 1) xs

mydrop 0 xs     = xs
mydrop n []     = []
mydrop n (x:xs) = mydrop (n - 1) xs

mytake n xs is strict in n, but not in xs, as mytake 0 undefined = []

Writing it the other way around would make it strict in xs but not in n.

Making the function nonstrict in both arguments is impossible in pure
Haskell, although easily possible with parallelism.


---------------------------------------------------------------------------------------


5.2

1. map is NOT strict:

map bottom = bottom          would mean that
(map bottom) [] = bottom []  or
[] = bottom,                 hence a contradiction

2. map f IS strict:

map f bottom <= map f []  = []
map f bottom <= map f [a] = [f a]

So, map f bottom = bottom


---------------------------------------------------------------------------------------


5.3. 

evens []     = []
evens (x:xs) = x : odds xs

odds  []     = []
odds  (x:xs) =     evens xs

alternates []       = ([],  [])
alternates ([x])    = ([x], [])
alternates (x:y:xs) = (x:fst ans, y:snd ans)
                      where ans = alternates xs

Derivation:

alternates []       = (evens [],  odds [])            = ([], [])
alternates ([x])    = (evens [x], odds [x])           = ([x], [])
alternates (x:y:xs) = (evens (x:y:xs), odds (x:y:xs)) = (x:odds (y:xs), evens (y:xs))
                    = (x:evens xs, y:odds xs)         = (x:fst (alternates xs), y:snd (alternates xs))
		    = (x:fst ans, y:snd ans)
		      where ans = alternates xs 


---------------------------------------------------------------------------------------


6.1

curry   f a b    = f (a, b)
uncurry f (a, b) = f a b

(uncurry . curry) f (a, b) = uncurry (curry f) (a, b)
			   = curry f a b
			   = f (a, b)

(curry . uncurry) f a b    = curry (uncurry f) a b
			   = uncurry f (a, b)
		           = f a b

Or, by extensionality, (curry . uncurry) = (uncurry . curry) = id, so they are inverses of each other. 

Strictness IS affected, as take f = const id (f a b = b), which is trivially nonstrict,
as f bottom = const id bottom = id,
but (uncurry f) bottom <= (uncurry f) (a, b) = f a b = b, for every b, thus pick b1 != b2 and get that
(uncurry f) bottom <= b1, b2, thus (uncurry f) bottom = bottom, so (uncurry f) is strict.


------------------------------------------------


6.2

Switching the equations results in a version of zip a b = [].

zip []     []     = []
zip (x:xs) []     = []
zip []     (y:ys) = []
zip (x:xs) (y:ys) = (x,y) : zip xs ys


---------------------------------------------------------------------------------------


6.3

myZipWith1 f a b = map (uncurry f) (zip a b)

myZipWith2 f (x:xs) (y:ys) = f x y : myZipWith2 f xs ys
myZipWith2 f _      _      = []

myZip xs ys = myZipWith2 (,) xs ys


---------------------------------------------------------------------------------------


6.4

splits xs = unfoldr f ([], xs)
            where f (a, b) = if   b == []
                             then Nothing
                             else Just ((head b, a ++ tail b), (a ++ [head b], tail b))

splits' xs = unfold n h t ([], xs)
             where  n = (== []) . snd
                    h a b = (head b, a ++ tail b)
                    t a b = (a ++ [head b], tail b)

permutations [a] = [[a]]
permutations xs = [x:zs | (x,ys) <- splits xs, zs <- perm ys]


---------------------------------------------------------------------------------------


6.5

include x  = foldr f [[x]]
             where f r ls = [(head t) : r : (tail t)] ++ (map (r:) ls)
                            where t = head lst


permutations' xs = foldr f [[]] xs
                   where f x rs = concat [include x r | r <- rs]

---------------------------------------------------------------------------------------


6.6

select_sort ls = unfoldr f ls
                 where f xs = if xs == []
                              then Nothing
                              else Just (minimum (splits xs))

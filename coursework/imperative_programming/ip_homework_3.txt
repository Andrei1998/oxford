Question 1

(a) It doesn't work on all cases anymore as the precondition is not satisfied,
its whole internal working being based on the fact that the array is sorted.
Most importantly, the loop invariant is not satisfied, so the i we're seeking
for may not even exist (e.g consider the array [1, 3, 5, 0] and x = 4), so,
most of the time, the returned value has little statistical significance.

(b) The loop doesn't execute at all, but the returned value
is correct, as a[0..0) < x <= a[0..0] is always vacuously true.

(c) We can always go far a larger integer type, like Long or BigInt, but
assuming the point is to get code which works on arrays of any Int length,
the trick is to get rid of the overflow happening in m = (i + j) / 2, by
replacing it with, say, m = i + (j - i) / 2.


----------------------------------------------------------------------------------------------------


Question 2

(a)
object Main extends App {
    // Pre: y >= 0
    // Post: returns x such that x * x <= y <= (x + 1) * (x + 1)
    def ternarySqrt(y: Int): Int = {
        require(y >= 0)
        var l = 0; var r = y + 1 // Invariant I: 0 <= l < r <= y + 1 and l * l <= y < r * r
        while (l + 1 < r) { // I
            val m1 = (2 * l + r) / 3
            val m2 = (l + 2 * r) / 3
            if (m1 * m1 > y) // sqrt(y) < [m1 .. r)
                r = m1  // I
            else if (m2 * m2 <= y) // [l .. m2] <= sqrt(y)
                l = m2 // I
            else { // [l .. m1] <= sqrt(y) < [m2 .. r) 
                l = m1; r = m2 // I      
            }
	}
        
        // I and l + 1 >= r
        // So r = l + 1 and l * l <= y < (l + 1) * (l + 1) <=> l = floor(sqrt(y))
        l
    }   
    for (i <- 0 to 25)
        println("sqrt(" + i + ") = " + ternarySqrt(i))
    
    def binarySqrt(y: Int): Int = {
        var l = 1; var r = y; var ans = 0
        while (l <= r) {
            val mid = l + (r - l) / 2
            if (mid <= y / mid) {
                ans = mid
                l = mid + 1
            }
            else
                r = mid - 1
        }
        ans
    }
    for (i <- 0 to 46000)
        assert(binarySqrt(i) == ternarySqrt(i))
}

When run this produces:
sqrt(0) = 0

sqrt(1) = 1

sqrt(2) = 1

sqrt(3) = 1

sqrt(4) = 2

sqrt(5) = 2

sqrt(6) = 2

sqrt(7) = 2

sqrt(8) = 2

sqrt(9) = 3

sqrt(10) = 3

sqrt(11) = 3

sqrt(12) = 3

sqrt(13) = 3

sqrt(14) = 3

sqrt(15) = 3

sqrt(16) = 4

sqrt(17) = 4

sqrt(18) = 4

sqrt(19) = 4

sqrt(20) = 4

sqrt(21) = 4

sqrt(22) = 4

sqrt(23) = 4

sqrt(24) = 4

sqrt(25) = 5

And doesn't raise any exceptions, as expected.


(b) No, for larger r - l this is quite obvious, while the small
cases need to be discussed separately on a one-by-one basis.

(c) 
object Main extends App {
    // Pre: y > 0
    // Post: returns x such that x * x <= y < (x + 1) * (x + 1)
    def ternarySqrt(y: Int): Int = {
        require(y > 0)
        var l = 1; var r = y + 1 // Invariant I: 0 <= l < r <= y + 1 and l * l <= y < r * r
        while (l + 1 < r) { // I
            val m1 = l + (r - l) / 3
            val m2 = r - (r - l + 2) / 3

            // Or, if we really want it to run on EXACTLY all of int:
	    // var m2 = r - (r - l) / 3
            // if ((r - l) % 3 != 0)
            //     m2 -= 1
            
	    if (m1 > y / m1) // sqrt(y) < [m1 .. r)
                r = m1  // I
            else if (m2 <= y / m2) // [l .. m2] <= sqrt(y)
                l = m2 // I
            else { // [l .. m1] <= sqrt(y) < [m2 .. r) 
                l = m1; r = m2 // I      
	    }        
	}
        
        // I and l + 1 >= r
        // So r = l + 1 and l * l <= y < (l + 1) * (l + 1) <=> l = floor(sqrt(y))
        l
    }   
    for (i <- 0 to 100000000)
        assert(binarySqrt(i) == ternarySqrt(i))
}

Which produces no output, so the two methods are "equally correct".


----------------------------------------------------------------------------------------------------


Question 3

(a)
def findNumber(end: BigInt): BigInt = {
    var l = BigInt(1); var r = end // Invariant I: 1 <= l <= r <= end and 
                                   // the number we're seeking for is in [l, r]
    while (l < r) { // I
        val mid = (l + r + 1) / 2;
        if (tooBig(mid)) // The number is in [l, mid - 1]
            r = mid - 1;
        else // The number is in [mid, r]
            l = mid;
    }
       
    // I and l == r  =>  I is the number we're seeking for
    l
}

Takes ~log_2(end) calls of tooBig (~10 here for end = 1000).
For an exact bound, at most ceil(log_2(end)).

(b)
def findNumber(): BigInt = {
    var end = BigInt(2) // Invariant I: 2 <= end <= 2 * nr
    while (!tooBig(end))
        end *= 2

    // end is now the first power of 2 strictly larger
    // than the number we're trying to find
    findNumber(end - 1)
}

Takes ~2log_2(number) calls of tooBig.
An exact bound can be established using the reasoning from (c) by setting alpha = 2.

(c)
Suppose we were multiplying end by alpha > 1 instead of 2 on the third line of findNumber().
Then, end will be such that end / alpha <= nr < end  =>  end <= alpha * nr. So, the total
number of calls of tooBig() will be at most 1 + [log_alpha(nr)] <= 1 + log_alpha(nr) for the
first part of the solution and ceil(log_2(alpha * nr)) <= 1 + log_2(alpha * nr) for the second
part. Overall, this approach makes at most log_alpha(nr) + log_2(alpha * nr) + 2 calls to tooBig().

log_alpha(nr) + log_2(alpha * nr) + 2 = log_2(nr) + log_alpha(nr) + log_2(alpha) + 2 =
log_2(nr) + log_2(nr) / log_2(alpha) + log_2(alpha) + 2 =
log_2(nr) * (1 + 1 / log_2(alpha)) + log_2(alpha) + 2

Now, we can make 1 / log_2(alpha) arbitrarily small by choosing a sufficiently large alpha.
Therefore, denote 1 / log_2(alpha) by eps and log_2(alpha) + 2 by r, so that we've
solved our problem with a number of calls to tooBig() at most

log_2(nr) * (1 + eps) + r

Therefore, for a fixed eps, we pick alpha > 1 to be an integer greater than or equal to 2 ^ (1 / eps)
and r to be log_2(alpha) + 2. For every choice of eps > 0 such an alpha exists, so the idea is sound.


----------------------------------------------------------------------------------------------------


Question 4

/*  Pre:  a is an array of integers
    Post: a contains the same elements as a0,
          but in sorted order */
def insertSort(a: Array[Int]): Unit = {
    val N = a.size
    
    var n = 1 // Invariant I: 1 <= n <= N and a[0..n) is sorted in ascending order
    while (n < N) { // I
        var l = 0; var r = n // Invariant J: 0 <= l <= r <= n and a[0 .. l) <= a[n] < a[r .. n)
        while (l < r) { // J
            val mid = (l + r) / 2;
            if (a(mid) <= a(n))
                l = mid + 1 // a[0 .. (mid + 1)) <= a[n] < a[r .. n)
            else
                r = mid     // a[0 .. l) <= a[n] < a[mid .. n)
            // J
        }
        
        // I and l = r  =>  a[0 .. l) <= a[n] < a[l .. n) 
        val k = l
        
        var t = n // Invariant K: k <= t <= n and a(t .. n] = a0((t - 1) .. (n - 1)]   
        val vl = a(n)
        while (t > k) { // I
            a(t) = a(t - 1)
            t -= 1 // I
        }
        
        // K and t = k  => a(k .. n] = a0((k - 1) .. (n - 1)]
        a(t) = vl // a was obtained from a0 by inserting a0[n] at position k
        
        n += 1 // I
    }
    
    // I and n = N  =>  a[0 .. N) is sorted in ascending order, as required
}

val ar = Array[Int](4, 3, 4, 1, 2, 3, 3, 3)
insertSort(ar)

for (it <- ar)
    print(it + " ")
println("");

This prints 1 2 3 3 3 3 4 4, as expected.

The number of comparisons is O(NlogN) while the total time complexity is
O(N^2), as insertion happens just as before in linear time per iteration.


----------------------------------------------------------------------------------------------------


Question 6

One such example would be the trivial [1, 2, 3, 4, 5].

/* Partition the segment a[l..r)
 * @return k s.t. a[l..k) < a[k..r) and l <= k < r
 */
def partition(l: Int, r: Int) : Int = {
    val x = a(l) // Pivot
    
    // Invariant I: a[l+1..i) < x <= a[j..r) && l < i <= j <= r
    var i = l + 1; var j = r
    while (i < j) { // I
        if (a(i) < x) // If the first element is correctly placed
            i += 1    // Skip it
        else if (a(j - 1) >= x) // If the last element is correctly placed
            j -= 1          // Skip it
        else { // Otherwise, swap the first and last elements
            val t = a(i);
            a(i) = a(j - 1);
            a(j - 1) = t;
            i += 1
            j -= 1;
        }
    }

    // Swap pivot into position
    a(l) = a(i - 1); a(i - 1) = x
    i - 1
}


----------------------------------------------------------------------------------------------------


Question 7

(a) 
def QSort(l: Int, r: Int) : Unit = {
    while (r - l > 1){ // Nothing to do if segment empty or singleton
        val k = partition(l,r)
        QSort(l, k)
        //QSort(k+1, r)
        l = k + 1
    }
}

(b) Pick array as = [N, N - 1, ..., 1]. The pivot element will always
be the largest amongst the subsegment of the array currently under consideration
and the partition routine will never move any element around, other than
shifting the pivot to its correct final position. Thus, the first
recursive call will always be of size r - l - 1, which is the worst possible
and showcases how the stack size may be linear in the size of the array.

(c) The trick is to make doing a non tail-recursive call only happen
together with at least halving the length of the range we've started with:

def QSort(l: Int, r: Int) : Unit = {
    if (r - l > 1){       // Nothing to do if segment empty or singleton
        val k = partition(l,r)
        if (k - l < k + 1 - r) {
            QSort(l, k)   // Perform the smaller call first
            QSort(k+1, r)
        }
        else {
            QSort(k+1, r) // Perform the smaller call first
            QSort(l, k)
        }
    }
}

This way, all recursive calls which are not tail-call optimized happen on a
range of size at most half of that of the range we've started with. This means
that winding can only happen at most ~log2(r - l) times, as required.


----------------------------------------------------------------------------------------------------


Question 8

(a) It works as expected, although the runtime is always quadratic in N.

Here I will assume the word "several" is to be read as "a quite large fraction".

(b) Quicksort slows down dramatically as the partitions will be quite badly
balanced (also, many of the later recursive calls will be right
away quadratic - sequences of equal elements). It can be further shown that
if we denote by T the maximum number of elements equal to each other (call these
elements "frequent elements" and the rest "rare elements"), then the time
complexity is Omega(T^2) on all imputs of this kind:

Whenever we partition there are 2 cases:
1. We partition around a sparse element. In this case we'll compare the pivot
with all T frequent elements, in order to ultimately recurse twice, one of the
two recursive calls containing ALL the T frequent elements together.
2. We partition around a frequent element. In this case we'll compare the pivot
with all T frequent elements, in order to ultimately recurse twice, one of the
two recursive calls containing ALL the T - 1 remaining frequent elements together.

As it can be seen, all the frequent elements will be compared with each other
AT LEAST ONCE, meaning the the total runtime is at least 1 + 2 + 3 + ... + T - 1,
or quadratic in T, equivalently.

(c) This is because many of the subroutine calls will be invoked on arrays of
equal elements, in which case the else branch will always be preferred by the
algorithm as x < x always returns false. The significant bias can be explained
by the very large number of comparisons between elements of equal value, as
explained in (b).
Replacing the "<" by a "<=" will surely speed up the code, but only by a constant
factor.

(d)
def partition2(l:Int, r: Int): (Int, Int) = {
    val x = a(l) // Pivot
    
    // Invariant I: l <= i < j <= k <= r and a[l .. i) < x and a[i .. j) = x and a[k .. r) > x
    var i = l; var j = l + 1; var k = r
    while (j < k) { // I
        if (a(j) < x) {
            // swap(i, j)
            val aux = a(i)
            a(i) = a(j)
            a(j) = aux
            i += 1; j += 1
        }    
        else if (a(j) == x)
            j += 1
        else {
            // swap(j, k - 1)
            val aux = a(j)
            a(j) = a(k - 1)
            a(k - 1) = aux
            k -= 1    
        }
    }

    (i - 1, j)
}

(e)
def QSort2(l: Int, r: Int) : Unit = {
    if (r - l > 1){ // Nothing to do if segment empty or singleton
        val p = partition2(l, r)
        QSort2(l, p._1);
        QSort2(p._2, r)
    }
}

Question 1

object Main extends App {
    // Adding and duplicates
    {val mySet = new scala.collection.mutable.HashSet[String]
    assert(mySet.size == 0)
    assert(mySet.add("abb") == true)
    assert(mySet.size == 1)
    assert(mySet.add("abb") == false)
    assert(mySet.size == 1)}

    // Removing and isEmpty
    {val mySet = new scala.collection.mutable.HashSet[String]
    assert(mySet.add("abb") == true)
    assert(mySet.remove("aab") == false)
    assert(mySet.isEmpty == false)
    assert(mySet.remove("abb") == true)
    assert(mySet.remove("abb") == false)
    assert(mySet.isEmpty == true) }
 
    // Contains
    {val mySet = new scala.collection.mutable.HashSet[String]
    assert(mySet.contains("abb") == false)
    assert(mySet.add("abb") == true)
    assert(mySet.add("abb") == false)
    assert(mySet.contains("abb") == true)
    assert(mySet.remove("abb") == true)
    assert(mySet.contains("abb") == false) }

    // Exception handling
    println(
        try {
            val mySet = new scala.collection.mutable.HashSet[String]
            mySet.min // An empty set has no minimum element
        }
        catch {
            case uoe: UnsupportedOperationException => "Interesting Exception"
            case e: Exception => "Casual Exception"
        }
    )
}


-----------------------------------------------------------------


Question 2

/* State: stk: P Array[A]
 * Init: stk = [] */
trait Stack[A] {
    /* Add nr to the back of the stack
     * post: stk = stk_0 ++ [nr] */
    def push(nr: A)
    
    /* Removes and returns the last pushed element
     * pre:  length stk > 0
     * post: stk = init stk_0 and returns last stk_0 */
    def pop(): A
    
    /* Checks whether or not the stack is empty
     * post: stk = stk_0 and returns length stk > 0*/
    def isEmpty(): Boolean
}


-----------------------------------------------------------------


Question 3

(a) Modify such that S: P [0..N) and
    add pre: 0 <= elem < N to the specification of add

(b)
object BitMapSet extends IntSet {
    private val N = 1000
    private val a = new Array[Boolean](N)
    private var sz = 0
    
    // Abs: S = {i : 0 <= i < N and a(i) == 1}
    // DTI: card(Abs) == sz

    // Add elem to the set    
    def add(elem: Int): Unit = {
        require(0 <= elem && elem < N)
        if (a(elem) == false) {
            a(elem) = true
            sz += 1
        }
    }

    // Remove elem from the set
    def remove(elem: Int): Unit = {
        if (0 <= elem && elem < N && a(elem)) {
            a(elem) = false
            sz -= 1
        }
    }
    
    // Test whether elem is in the set    
    def isIn(elem: Int): Boolean = a(elem)
    
    // The size of the set
    def size: Int = sz
}


-----------------------------------------------------------------


Question 4

(a) In this context, this is supposed to be read as "the smallest element
present in this set", assuming that A is comparable via a total order.
Note how it implicitly also expresses that it shouldn't alter the set.

(b)     
/* Returns the smallest element in the set
 * pre:  card(S) > 0
 * post: S = S0 and returns min {v | v in S}*/
def head: Int

(c)
// Find the smallest element in the set
// pre:  size > 0
// post: a = a0 and returns the smallest element in the set
def head: Int = {
    // Invariant: 0 <= ans <= N and a[0 .. ans) = 0
    var ans = 0
    while (ans < N && !a(ans))
        ans += 1
    // I and (ans >= N or a(ans) = 1)
    // It can't be the case that I and ans = N, as that would imply that the set is empty
    // So a(ans) = 1 and a[0 .. ans) = 0
    ans
}


-----------------------------------------------------------------


Question 6

// Representing the phone book using a pair of sorted arrays
object ArraysBook extends Book{
    private val MAX = 1000 // Max number of names we can store
    private val names = new Array[String](MAX)
    private val numbers = new Array[String](MAX)
    private var count = 0
    // These variables together represent the mapping
    // book = {names(i) -> numbers(i) | i <- [0 .. count)}
    //
    // Invariant: count <= MAX && 
    // entries in names[i] < names[i + 1] for all i in [0 ..count - 1)
    
    // Return the smallest index 0 <= i < count s.t.
    // name <= names(i) or count if there are none
    // O(log count)
    private def find(name: String): Int = {
        // Invariant: 0 <= l <= r <= count and 
        //            names[0 .. l - 1) < name <= names[r .. count)
        var l = 0; var r = count
        while (l < r) {
            val mid = (l + r) / 2
            if (name <= names(mid))
                r = mid     // name <= names[mid .. count)
            else
                l = mid + 1 // names[0 .. mid] < name 
        }
        // I and l == r  =>  names[0 .. r - 1) < name <= names[r .. count)    
        r
    }
    
    // Shifts the elements of the array of pairs one position to the right
    // starting from the one at position pos and increments count by one
    // pre: 0 <= pos <= count and count < MAX
    // O(count - pos)
    private def shiftRight(pos: Int) = {
        require(0 <= pos && pos <= count && count < MAX)
        // Invariant: pos <= i <= count - 1 and names[i + 1 .. count + 1) = names0[i .. count)     and
        //                                      numbers[i + 1 .. count + 1) = numbers0[i .. count) and
        //                                      names[0 .. pos] == names0[0 .. pos]                and
        //                                      numbers[0 .. pos] == numbers0[i .. pos]
        for (i <- (count - 1) to pos by -1) {
            names(i + 1) = names(i)
            numbers(i + 1) = numbers(i)
        }
        count += 1
    }
    
    // Shifts the elements of the array of pairs one position to the left
    // starting from the one at position pos and increments count by one
    // pre: 0 <= pos < count
    // O(count - pos)
    private def shiftLeft(pos: Int) = {
        require(0 <= pos && pos < count)
        // Invariant: pos <= i < count      and names[pos .. i) = names0[pos + 1 .. i + 1)     and
        //                                      numbers[pos .. i) = numbers0[pos + 1 .. i + 1) and
        //                                      names[0 .. pos) == names0[0 .. pos)                and
        //                                      numbers[0 .. pos) == numbers0[i .. pos)
        for (i <- pos until count) {
            names(i) = names(i + 1)
            numbers(i) = numbers(i + 1)
        }
        count -= 1
    }
 
    // Return the number stored against name
    // pre: name is in the domain of the mapping
    // O(log count)
    def recall(name: String): String = {
        val i = find(name)
        assert(i < count && names(i) == name)
        numbers(i)
    }
      
    // Is name in the book?
    // O(log count)
    def isInBook(name: String): Boolean = {
        val i = find(name)
        i < count && names(i) == name
    }

    // Add the maplet name -> number to the mapping */
    // O(count)
    def store(name: String, number: String) = {
        val i = find(name)
        if (i == count || names(i) != name){
            assert(count < MAX)
            shiftRight(i)
            names(i) = name
        }
        numbers(i) = number
    }
    
    // Delete the number stored against name (if it exists) */
    // O(count)
    def delete(name: String): Boolean = {
        val i = find(name)
        if(i != count && names(i) == name) {
            shiftLeft(i) // Shift left all elements after i 
            true
        }
        else
            false
    }
}

val t = ArraysBook
t.store("abc".mkString, "ss".mkString)
println(t.recall("abc".mkString)) // ss
println(t.delete("abC".mkString)) // false
println(t.delete("abc".mkString)) // true
t.store("abc".mkString, "ee".mkString)
t.store("a".mkString, "ff".mkString)
t.store("ab".mkString, "gg".mkString)
println(t.recall("a".mkString))   // ff
println(t.recall("ab".mkString))  // gg
println(t.recall("abc".mkString)) // ee


-----------------------------------------------------------------


Question 7

// state: bag: Int -> Int
// Init:  bag(i) = 0 for all i
trait Bag {
    // Increment the count of element elem
    // pre:  0 <= elem < MAX
    // post: bag(i) = bag0(i) for all i != elem and
    //       bag(i) = bag0(i) + 1 for i =  elem
    def incrementCount(elem: Int)
    
    // Get the count of element elem
    // post: bag = bag0 and returns bag(elem)
    def getCount(elem: Int): Int
}

object ArrayBag extends Bag {
    private val MAX = 1000
    private val c = new Array[Int](MAX)
    
    // Abs: bag(i) = c(i) for all i in [0 .. MAX) 
    //      bag(i) = 0    everywhere else
    
    // Increment the count of element elem
    def incrementCount(elem: Int) = {
        require(0 <= elem && elem < MAX)
        c(elem) += 1
    }
    
    // Get the count of element elem
    def getCount(elem: Int): Int = {
        if (elem < 0 || elem >= MAX)
            0
        else
            c(elem)
    }        
}


-----------------------------------------------------------------


Question 8

// post: nrs contains the same elements as nrs0,
//       but in sorted order
def countSort(nrs: Array[Int]) = {
    val t = ArrayBag; val N = nrs.size
    
    // Insert all elements of nrs into t once
    for (i <- 0 until N)
        t.incrementCount(nrs(i))
    
    // Invariant I: 0 <= where <= N and nrs[0 .. where)
    // consists of the smallest where elements of nrs0
    // and 0 <= i <= MAX
    var where = 0
    for (i <- 0 until MAX) {
        // Invariant j: 0 <= j <= t.getCount(i)
        for (j <- 0 until t.getCount(i)) {
            nrs(where) = i
            where += 1
        }
    }
}

val x = Array[Int](3, 1, 2, 1)
countSort(x)
for (i <- 0 until x.size)
    println(x(i)) // 1 1 2 3
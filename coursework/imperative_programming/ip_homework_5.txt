Question 1

(a)
var myList: Node = null
for (i <- 1 to 12)
    myList = new Node(i, myList)

(b)
class Node(datum: Int, var next: Node) {
    override def toString: String = {
        if (next == null)
            datum.toString
        else
            datum.toString + " -> " + next.toString
    }
}

println("List is "+ myList)
List is 12 -> 11 -> 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1


(c)
// Invariant I: - All list elements of the initial list
//              up to and including myList have already
//              been reversed, the head of this new
//              list being myList 
//              - "it" is the element that used
//              to follow myList in the initial list
//              - it iterates over the list, stopping at null
var it: Node = myList
myList = null
while (it != null) {
    val nxt = it.next
    it.next = myList
    myList = it
    it = nxt
}

println("List is "+ myList)
List is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 -> 11 -> 12



--------------------------------------------------------------------------------


Question 2

object Main extends App {
    // Easch implementation of this trait represents a mapping from names
    // (Strings) to numbers (also Strings).
    trait Book {
      // State: book: String -|-> String
      // Init:  book = {}
    
      // Add the maplet name -> number to the mapping
      // POST: book = book_0 (+) {name -> number}
      def store(name:String, number:String)
    
      // Return the number stored against name
      // PRE: name in dom book
      // POST book = book_0 && returns book(name)
      def recall(name:String): String
    
      // Is name in the book?
      // POST: book = book_0 && returns name in dom book
      def isInBook(name: String): Boolean
    
      /** Delete the number stored against name (if it exists).
        * post: returns (name in dom book0) and
        * (name in dom book0 and book = book0 - {name ? book0(name)} or
        * name not in dom book0 and book = book0) */
      def delete(name: String): Boolean
    }
    
    // Representing the phone book using a sorted linked list with a dummy header
    class LinkedListHeaderBook extends Book {
      override def toString: String = list.toString
        
      private var list = new LinkedListHeaderBook.Node("?", "?", null)
      // Abs: book = {n.name -> n.number | n in L(list)}
      // DTI: list != null and L(list.next) is finite and sorted in nondecreasing order
    
      /** Return the first node of the list such that name <= list.next.name,
        * assuming the sentinel value of null.name = "|" (larger than all letters)
        * Post: book = book_0 && returns n s.t. n in L(list) &&
        * (name <= n.next.name and name > n.name) */
      private def find(name: String): LinkedListHeaderBook.Node = {
        var n = list
        // Invariant: all the nodes x up to and  
        // including n have x.name < name 
        // for all n1 in L(list.next, n.next), n1.name != name
        while (n.next != null && n.next.name < name)
            n = n.next
        n
      }
    
      /** Is name in the book? */
      def isInBook(name: String): Boolean = {
          val it = find(name)
          return it.next != null && it.next.name == name 
      }
      
      /** Return the number stored against name */
      def recall(name: String): String = {
          val it = find(name)
          assert(it.next != null && it.next.name == name) 
          it.next.number
      }
    
      /** Add the maplet name -> number to the mapping */
      def store(name: String, number: String) = {
        val it = find(name)
        if (it.next != null && it.next.name == name) {
            // Name already exists
            it.next.number = number
        } 
        else
            it.next = new LinkedListHeaderBook.Node(name, number, it.next)   
      }
    
      /** Delete the number stored against name (if it exists); 
        * return true if the name existed. */
      def delete(name: String): Boolean = {
        val it = find(name)
        if (it.next != null && it.next.name == name) {
            it.next = it.next.next
            return true
        }
        else
            return false
      }
    }
    
    // Companion object
    object LinkedListHeaderBook {
        private class Node(var name: String, var number: String, var next:Node) {
            override def toString: String = {
                if (next.next == null)
                    "(" + next.name.toString + ", " + next.number.toString + ")"
                else
                    "(" + next.name.toString + ", " + next.number.toString + ")" + " -> " + next.toString
            }
      }
    }

    // A few rudimetary tests    
    val v = new LinkedListHeaderBook;
    v.store("z", "1")
    v.store("x", "456")
    v.store("x", "457")
    v.store("y", "1234")
    println(v)
    println(v.delete("y"))
    println(v)
    println(v.delete("x"))
    println(v)
}

Output:
(x, 457) -> (y, 1234) -> (z, 1)

true

(x, 457) -> (z, 1)

true

false

(z, 1)



--------------------------------------------------------------------------------


Question 4

(a) Let X be number of positions of the phone book we have to search through in
order to recall a random name from set S = {s_0, s_1, ..., s_{n - 1}}.
Denote by t the permutation of indices we've chosen for storing S in order.

Then, by the law of total expectation, E[X] = p_{t_0} * 1 + p_{t_1} * 2 + .. +
p_{t_{n - 1}} * n. In order to minimize this, by the rearrangement inequality,
we'll pick t_i = i (this is so that larger numbers get associated with smaller
weights, thus minimizing the expectation).

Alternative solution: simple exchange argument over entries adjacent in t.

(b) I will demonstrate this on the LinkedListHeaderBook implementation, as
it works out the easiest. We'll change the find function as follows:

/** Return the node before the one containing name.
  * Post: Changes the list such that the node with the searched name 
  * is the head of the list and returns n s.t. n in L(list) &&
  * (n.next.name = name or n.next = null if no such Node exists) */
private def find(name: String) : LinkedListHeaderBook.Node = {
  // Search for the node with the propper name
  var n = list
  // Invariant: name does not appear in the nodes up to and  
  // including n; i.e., 
  // for all n1 in L(list.next, n.next), n1.name != name
  while(n.next != null && n.next.name != name) n = n.next

  // If found, move n to the head of the list
  if (n.next != null) {
     val aux = list.next    
     val aux2 = n.next.next
     list.next = n.next
     n.next.next = aux
     n.next = aux2
  }
  n
}


--------------------------------------------------------------------------------


Question 5

class ArrayQueue extends Queue[Int] {
    private val MAX = 100 // max number of pieces of data
    private val data = new Array[Int](MAX)
    
    private var front = 0
    private var back = 0
    private var sz = 0
    
    private def succ(x: Int): Int = (x + 1) % MAX
    
    /** Abs: q = data
      * DTI: 0 <= sz <= MAX and the elements
      * data(front) data(succ(front)) ... data(back),
      * not including the last one, are sz in number
      * Append x to the back of the queue */
    def enqueue(x: Int) = {
        sz = sz + 1
        data(back) = x
        back = succ(back)
    }
    
    /** Poll the front of the queue (pop and return) */
    def dequeue(): Int = {
        sz = sz - 1
        val res = data(front)
        front = succ(front)
        res
    }
    
    /** Test whether the queue is empty.
        The queue is empty when its size is exactly 0 */
    def isEmpty = sz == 0
    
    /** Test whether the queue is full.
      * The queue is full when its size is exactly MAX */
    def isFull  = sz == MAX
}


--------------------------------------------------------------------------------


Question 6

class ListQueue extends Queue[Int] {
    private type Nd = ListQueue.Node

    // Abs: s = map datum $ L(dummy.next, dummy)
    // DTI: L(header) is finite and back.next == null
    //      and back in L(header)    

    // The list is singly linked with a header node
    private var header = new Nd(-1, null)
    private var back = header
    
    // Add element to the back of the queue
    def enqueue(x: Int) = {
        back.next = new Nd(x, null)
    }
    
    // Find first element of the queue
    def dequeue:  Int = {
        assert(!isEmpty)
        val res = header.next.datum
        header.next = header.next.next
        res
    }
    
    // Check whether the queue is empty
    def isEmpty: Boolean = header.next == null
}

// Companion object
object ListQueue {
    class Node(var datum: Int, var next: Node)
}


--------------------------------------------------------------------------------


Question 7

// A deque of Ints
// state: s: seq Int
// init: s = []
trait DoubleEndedQueueInt {
    /** Is the queue empty?
      * post: q = q0 and returns q != [] */
    def isEmpty: Boolean
    
    /** Add x to the start of the queue.
      * post: q = x : q */
    def addLeft(x: Int)
    
    /** Get and remove element from the start of the queue.
      * pre: q != []
      * post: q = q0 and returns head q */
    def getLeft: Int
    
    /** Add element to the end of the queue.
      * post: q = q ++ [x] */
    def addRight(x: Int)
    
    /** get and remove element from the end of the queue.
      * pre: q != []
      * post: q = q0 and returns last q */
    def getRight: Int
}

class DoubleEndedQueueIntList extends DoubleEndedQueueInt {
    private type Nd = DoubleEndedQueueIntList.Node

    // Abs: s = map datum $ L(dummy.next, dummy)
    // DTI: L(dummy.next, dummy) is finite and
    //      n.next.prev = n.prev.next = n for all n in dummy : L(dummy.next, dummy)
    
    // The list is circular with a header node
    private var dummy = new Nd(-1, null, null)
    
    // Add element to the front of the deque 
    def addLeft(x: Int) = {
        dummy.next = new Nd(x, dummy, dummy.next)
        dummy.next.next.prev = dummy.next
    }
    
    // Add element to the back of the deque
    def addRight(x: Int) = {
        dummy.prev = new Nd(x, dummy.prev, dummy)
        dummy.prev.prev.next = dummy.prev
    }
    
    // Find first element of the deque
    def getLeft:  Int = {
        assert(!isEmpty)
        dummy.prev.datum
    }
    
    // Find last element of the deque
    def getRight: Int = {
        assert(!isEmpty)
        dummy.next.datum 
    }
    
    // Check whether the deque is empty
    def isEmpty: Boolean = dummy.next == dummy
}

// Companion object
object DoubleEndedQueueIntList {
    class Node(var datum: Int, var prev: Node, var next: Node)
}
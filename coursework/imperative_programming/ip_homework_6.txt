// Question 1

(a)
object Anagrams {
    /** The dictionary */
    var dict: Array[String] = null
    
    /** Backtracking procedure, appends to List "anagrams" all strings that start with the
      * first "pos" characters of "current" and are anagrams of "target".
      * "remaining" is an array s.t. remaining[0 .. target.size - pos) consists of all the
      * characters in target but not in current[0, pos). */
    def backtr(target: String, current: Array[Char], pos: Int, remaining: Array[Char], anagrams: ListBuffer[String]): Unit = {
        if (pos == target.length) // If we've used all letters in target
            anagrams += current.mkString // Then append the newly found anagram to list "anagrams"
        else {
            // Pick an arbitrary unsed letter from "remaining"
            for (i <- 0 until target.size - pos) {
                current(pos) = remaining(i) // Place letter in the "current" candidate anagram
                
                // Swap picked letter with the last one in remaining, thus
                // implicitly discarding it when calling backtr(pos + 1) 
                var aux = remaining(target.size - pos - 1)
                remaining(target.size - pos - 1) = remaining(i)
                remaining(i) = aux
                
                backtr(target, current, pos + 1, remaining, anagrams)
                
                // Swap back
                aux = remaining(target.size - pos - 1)
                remaining(target.size - pos - 1) = remaining(i)
                remaining(i) = aux
            }
        }
    }

    // Prints out all anagrams of word,
    // including itself, if it's in The
    // dictionary
    def findAnagrams(word: String) = {
        val N = word.length
        val current = new Array[Char](N)
        val anagrams: ListBuffer[String] = new ListBuffer[String]
        val remaining: Array[Char] = new Array[Char](N)
        for (i <- 0 until N) // Make "remaining" a copy of "word"
            remaining(i) = word(i) 
        
        // Build all anagrams of "word"
        backtr(word, current, 0, remaining, anagrams)
    
        // Print those anagrams of "word"
        // that can be found in "dict"
        for (an <- anagrams)
            for (di <- dict)
                if (an == di)
                    println(an)
    }

    // The main function
    def main(): Unit = {
        val word = "rae" // The word we're looking for
        
        // Read the dictionary
        val dictFile = "input.txt" // "knuth_words"
        dict = Source.fromFile(dictFile).getLines.toArray
        
        findAnagrams(word)    
    }
}

This is, of course, very slow in all cases when word.length is not
relatively small, as the search for anagrams is not guided
by the dictionary in any way, the latter being exponentially smaller
in size compared to the total number of possible anagrams.


(b)

/** The anagrammatical dictionary */
var anDict: Array[(String, String)] = null

def findAnagramsFast(word: String) = {
    // Print all words from the dictionary that have
    // the same .sorted as "word"
    for (i <- 0 until anDict.length)
        if (anDict(i)._1 == word.sorted)
            println(anDict(i)._2)
}

// The main function
def main(): Unit = {
    val word = "rae" // The word we're looking for
    
    // Read the dictionary
    val dictFile = "input.txt" // "knuth_words"
    dict = Source.fromFile(dictFile).getLines.toArray
    
    // Build the anagrammatical dictionary
    anDict = dict.map(x => (x.sorted, x)).sorted
    
    findAnagramsFast(word)    
}


----------------------------------------------------------------


// Question 2

As appealing as that may sound, hash tables are generally designed
such that their load factor is under one, all operations running in
constant time, on average. These being said, what really matters is
the constant factor overhead, which is generally quite high for all
data structures more involved than a simple array / list. So arrays
(or linked lists) are indeed the best choice for implementing chaining
hash tables.


----------------------------------------------------------------


// Question 4

// A hash table, representing a bag of words; i.e., for each
// word we record how many times the word is stored.
class HashBagOfWords {
    // DTI: For all strings "word", there are no null
    //      entries in the "table" array between its
    //      first and last occurence, if there are any.
    
    // The hash function we will use
    private def hash(word: String) : Int = {
        def f(e: Int, c: Char) = (e*41 + c.toInt) % N
        word.foldLeft(1)(f)
    }

    private val N = 100 // Capacity of the hash table
    private val table = new Array[(String, Int)](N) // The hash table
  
    /** Add an occurrence of word to the table */
    def add(word: String): Unit = {
        // Invariant: for all previously seen h values,
        //            it holds that either table(h)._1 == null or
        //            table(h)._2 == 0
        var h = hash(word)
        while (table(h)._1 == null || table(h)._2 == 0)
            h = (h + 1) % N
        table(h) = (word, table(h)._2 + 1)
    }
    
    /** Find the index i (0 <= i < N) s.t. table(i) =
      * (word, count(word)), or an arbitrary position if
      * no such i exists */
    def find(word: String): Int = {
        // Invariant: for all previously seen h values,
        //            it holds that either table(h)._1 != null and
        //            table(h)._1 != word
        var h = hash(word)
        while (table(h)._1 != null && table(h)._1 != word)
            h = (h + 1) % N
        h
    }
    
    /** The count stored for a particular word */
    def count(word: String): Int = {
        var h = find(word)
        if (table(h)._1 == word)
            table(h)._2
        else
            0
    }
  
    /** Remove an occurence of word from the table */
    def remove(word: String): Unit = {
        var h = find(word)
        if (table(h)._1 == word) {
            if (table(h)._2 > 0)
                table(h) = (table(h)._1, table(h)._2 - 1)
        }
    }
}


----------------------------------------------------------------


// Question 5

(a)
def printRec(h: Int): Unit = {
    println(" . " * h + word)
    if (left == null)
        println(" . " * (h + 1) + "null")
    else
        left.printRec(h + 1)
    if (right == null)
        println(" . " * (h + 1) + "null")
    else
        right.printRec(h + 1)
}

(b)
def printIter = {
    val stack = new scala.collection.mutable.Stack[(Tree, Int)]
    
    // Invariant: We still need to print t; and for each pair (t1, h1)
    //            in the stack, we still need to print the data in the top
    //            node and the data in the nodes of its right subtree
    //            (nodes at the top of the stack shall be printed before all
    //            nodes further down); h1 is the distance from the root to t1;
    //            h is the distance from the root to t.
    var t = this; var h = 0
    while (t != null || !stack.isEmpty) {
        if (t != null) {
            println(" . " *  h + t.word)
            stack.push((t, h))
            t = t.left; h = h + 1
        }        
        else {
            println(" . " * h + "null")
            val aux = stack.pop
            t = aux._1.right; h = aux._2 + 1
        }
    }
    
    // Print the last leaf
    println(" . " * h + "null")
}


----------------------------------------------------------------


// Question 6

def flip(t: Tree): Unit = {
    if (t != null) {
        // Swap left son and right son
        val aux = t.left
        t.left = t.right
        t.right = aux
        
        // Recursively flip the sons
        flip(t.left)
        flip(t.right)
    }
}
    
    
----------------------------------------------------------------

    
// Question 7

(a) // Define the following method inside the companion object:
def countAllRec(t: Tree): Int = {
    var ans = t.count
    if (t.left != null)
        ans += countAllRec(t.left)
    if (t.right != null)
        ans += countAllRec(t.right)
    ans
}

def countAll(): Int = BinaryTreeBag.countAllRec(root)
    
(b)
def countAll(): Int = {
    var t = root
    val stack = new scala.collection.mutable.Stack[Tree]
    var ans = 0
   
    // Invariant: Imagine printing the tree inorder. Then ans contains
    //            the sum of the count values of all nodes we've printed so far.
    //            We still need to print t; and for each tree t1 
    //            in the stack, we still need to print the data in the top 
    //            node and the data in the nodes in its right subtree
    //            (nodes closer to the top of the stack shall be printed
    //            before nodes further down).
    while (t != null || !stack.isEmpty){
        if(t != null) {
            stack.push(t); t = t.left
        }
        else {
            val t1 = stack.pop
            ans += t1.count
            t = t1.right
        }
    }
    
    ans
}

Variant: the sum of countAll values of t
         and all trees in the stack

         
----------------------------------------------------------------


Question 8

(a) // Define the following method inside the companion object:
// Returns (minH, maxH)(t)
def getMinMaxDepth(t: Tree): (Int, Int) = {
    if (t == null)
        (0, 0)
    else if (t.left == null) {
        val aux = getMinMaxDepth(t.right)
        (1 + aux._1, 1 + aux._2)
    }
    else if (t.right == null) {
        val aux = getMinMaxDepth(t.left)
        (1 + aux._1, 1 + aux._2)
    }
    else {
        val aux1 = getMinMaxDepth(t.left)
        val aux2 = getMinMaxDepth(t.right)
        (1 + Math.min(aux1._1, aux2._1), 1 + Math.max(aux1._2, aux2._2))
    }
}

def getMinMaxDepth = BinaryTreeBag.getMinMaxDepth(root)
 
(b) // Returns (minH, maxH)(root)
def getMinMaxDepth: (Int, Int) = {
    var t = root
    var h = 0
    val stack = new scala.collection.mutable.Stack[(Tree, Int)] // Pairs (Node, Height)
    var ans = (1000000000, -1) // Sentinel value for when we haven't seen any nodes yet  

    // Invariant: Imagine printing the tree inorder. Then ans = (hmin, hmax) is s.t
    //                 hmin is the smallest height of all leaves we've printed so far
    //            and  hmax is the largest  height of all leaves we've printed so far.
    //            We still need to print t; and for each pair (t1, h1) 
    //            in the stack, we still need to print the data in t1 
    //            node and the data in the nodes in t1's right subtree
    //            (nodes closer to the top of the stack shall be printed
    //            before all nodes further down); h1 is the distance from the root to t1;
    //            h is the distance from the root to t.
    while (t != null || !stack.isEmpty) {
        if (t != null) {
            stack.push((t, h));
            t = t.left
            h = h + 1
        }
        else {  
            val aux = stack.pop
            t = aux._1; h = aux._2
            if (t.left == null && t.right == null) { // Whenever a new leaf is discovered
                // Update the answer
                if (h < ans._1)
                    ans = (h, ans._2)
                if (h > ans._2)
                    ans = (ans._1, h)
            }
            t = t.right; h = h + 1
        }
    }
    ans
}
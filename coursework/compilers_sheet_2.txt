Compilers Sheet 2 - MT 2018
Andrei-Costin Constantinescu


-----------------------------------------------------------------------------------------


2.1

Binary search:

begin
  x := 200000000;
  l := 1; r := x;
  while l <= r do
    mid := (l + r) div 2;
    if mid <= x div mid then
        l := mid + 1
    else
        r := mid - 1
    end
  end;
  print l - 1; newline
end.

Translation to KEIKO:

MODULE Main 0 0       ! Program is named (module) Main
IMPORT Lib 0          ! Program uses library routines from module Lib
ENDHDR                ! Marks the end of the header directives list

PROC MAIN 0 0 0       ! Directive marking the beginning of a procedure named Main
!   x := 200000000;   ! which uses n bytes of stack space for local variables 
CONST 200000000       ! Pushes 200000000 onto the evaluation stack
STGW _x               ! Stores 200000000 into global address _x
!   l := 1; r := x;
CONST 1               ! Pushes 1 onto the stack
STGW _l               ! Stores 1 into global address _l
LDGW _x               ! Pushes the value stored at global address _x onto the stack 
STGW _r               ! Stores 200000000 onto global address _r
JUMP L3               ! Unconditional branch to label L3
LABEL L2              ! Directive to attach a label L3 to the following instruction
!     mid := (l + r) div 2;
LDGW _l               ! Pushes the value stored at global address _l onto the stack
LDGW _r               ! Pushes the value stored at global address _r onto the stack
PLUS                  ! Adds together the two values at the top of the stack
CONST 2               ! Pushes 2 onto the stack
DIV                   ! Performs integer division between the two values at the top of the stack
STGW _mid             ! Stores the result (_l + _r) div 2 into global address _mid
!     if mid <= x div mid then
LDGW _mid             ! Loads the value stored at global address _mid onto the stack
LDGW _x               ! Loads the value stored at global address _x onto the stack 
LDGW _mid             ! Loads the value stored at global address _mid onto the stack
DIV                   ! Performs integer division between the two values at the top of the stack
JLEQ L5               ! Compares the two integers at the top of the stack, jumping to
                      ! L5 if _mid <= x / _mid
JUMP L6               ! Unconditional jump to L6
LABEL L5              ! Directive to attach a label L5 to the following instruction
!         l := mid + 1
LDGW _mid             ! Loads the value stored at global address _mid onto the stack  
CONST 1               ! Pushes 1 onto the stack
PLUS                  ! Adds together the values at the top of the stack
STGW _l               ! Stores value at the top of the stack to global address _l
                      ! Hence performing _l = _mid + 1
JUMP L7               ! Unconditional jump to L7
LABEL L6              ! Directive to attach a label L6 to the following instruction
!         r := mid - 1
LDGW _mid             ! Loads the value stored at global address _mid onto the stack 
CONST 1               ! Pushes 1 onto the stack
MINUS                 ! Subtracts the 2 values at the top of the stack
STGW _r               ! Stores value at the top of the stack to global address _r   
LABEL L7              ! Directive to attach a label L5 to the following instruction
LABEL L3              ! Directive to attach a label L3 to the following instruction
!   while l <= r do
LDGW _l               ! Loads the value stored at global address _l onto the stack
LDGW _r               ! Loads the value stored at global address _r onto the stack
JLEQ L2               ! Compares the two integers at the top of the stack, jumping to
                      ! L2 if _l <= _r  
JUMP L4               ! Unconditional jump to L4
LABEL L4              ! Directive to attach a label L4 to the following instruction 
!   print l - 1; newline
LDGW _l               ! Loads the value stored at global address _l onto the stack 
CONST 1               ! Pushes 1
MINUS                 ! Subtracts the two values at the top of the stack
CONST 0               ! Pushes 0
GLOBAL lib.print      ! Pushes global address lib.print 
PCALL 1               ! Calls lib.print with static link 0 and argument _l - 1
CONST 0               ! Pushes 0
GLOBAL lib.newline    ! Pushes global address lib.line
PCALL 0               ! Calls lib.newline with static link 0
LABEL L1              ! Directive to attach a label L1 to the next instruction 
RETURN                ! Returns from Main 
END                   ! Directive marking end of Main procedure

GLOVAR _r 4           ! Directive asking the assembler/linker to reserve 4 bytes of
                      ! memory for a global variable named _x, aligned to a multiple of
                      ! of 4 bytes
GLOVAR _mid 4         ! Same as above
GLOVAR _x 4           ! Same as above
GLOVAR _l 4           ! Same as above


-----------------------------------------------------------------------------------------


2.2

(a) The following KEIKO bytecode performs the required, leaving the result at
the top of the stack:

CONST 1
LDGW x
PLUS
CONST
SWAP
DIV

-----------------------------------------------------------------------------------------

(b) Let  gen_expr be the code generating function.
Distinguish three cases:

1. d1 = d2:
    In this case min (max d1 (d2 + 1)) (max (d1 + 1) d2) = 1 + d1 = 1 + d2

    This depth can be achieved by generating the following unexpanded code:

    SEQ [gen_expr e1;
         gen_expr e2;
         BINOP op]

    Where the maximum stack size is achieved during the evaluation of e2.

2. d1 < d2:
    In this case min (max d1 (d2 + 1)) (max (d1 + 1) d2) = d2

    This depth can be achieved by generating the following unexpanded code:
    
    SEQ [gen_expr e2;
         gen_expr e1;
         SWAP;
         BINOP op]
    
    Where the maximum stack size is achieved during the evaluation of e2.

3. d1 > d2
    In this case min (max d1 (d2 + 1)) (max (d1 + 1) d2) = d1

    This depth can be achieved by generating the following unexpanded code:
    
    SEQ [gen_expr e1;
         gen_expr e2;
         BINOP op]
    
    Where the maximum stack size is achieved during the evaluation of e1.
    
let rec cost =
  function
      Constant x ->
        1
    | Variable x ->
        1
    | Monop (w, e) ->
        cost e
    | Binop (w, e1, e2) ->
        let d1 = cost e1 in
        let d2 = cost e2 in
          min (max d1 (d2 + 1)) (max (d1 + 1) d2)
    

For the proof part, proceed by structural induction.
Distinguish between 3 cases:

    (i)      e matches either Constant x or Variable x.
    In both of these, the number of operands is always 1. Since 1 < 2^N for all N >= 1,
    but cost e = 1 <= N, the condition trivially holds true in these cases.
    
    (ii)  e matches Monop(w, e1).
    Then, cost e = cost e1 and also the number of operands of e equals the number of operands of e1,
    so we are done by invoking the inductive hypothesis directly.
    
    (iii) e matches Binop(w, e1, e2).
    We'll prove the contrapositive:
    i.e. If cost e > N then e has at least 2^N operands.
    To show this, it's easiest to assume a fixed value for cost e = K
    and show the tightest of the conclusions:
    Namely, we'll show that if cost e = K, then e has at least 2^(K - 1) operands.
    
    Distinguish between 2 subcases (WLOG cost e1 >= cost e2):
        1. cost e1 = cost e2 = K - 1:
            Then by the inductive hypothesis e1 has at least 2^(K - 2) operands and
            e2 has at least 2^(K - 2) operands. Thus e has at least 2 * 2^(K - 2)
            operands, or 2^(K - 2), as required.
        
        2. cost e1 = K, cost e2 < K:
            Then by the inductive hypothesis e1 has at least 2^(K - 1) operands,
            and so e has at least 2^(K - 1) operands, as required.
    
-----------------------------------------------------------------------------------------
    
(c)
(* Quadratic complexity at worst, but fine in practice *)
let rec gen_expr =
   function
       Constant x ->
         CONST x
     | Variable x ->
         SEQ [LINE x.x_line; LDGW x.x_lab] (* Why is LINE needed EXACTLY here? *)
     | Monop (w, e) ->
         SEQ [gen_expr e; MONOP w]
     | Binop (w, e1, e2) ->
         let d1 = cost e1 in
         let d2 = cost e2 in
           if d1 >= d2 then
             SEQ [gen_expr e1;
                  gen_expr e2;
                  BINOP w]
           else
             SEQ [gen_expr e2;
                  gen_expr e1;
                  SWAP;   (* Requires VM support for this *)
                  BINOP w]

                  
-----------------------------------------------------------------------------------------
                  
                  
2.4
(a) One of the main flaws with this scheme is how it treats an else-less if statement as an
if-else statement with empty else body. For example, consider how the following simple if
statement:

    if expr1 then 
        ...
    end

gets translated into:

    gen_cond expr1 lab1 lab2;
    LABEL lab1;
        ...
    JUMP lab3;
    LABEL lab2;
    LABEL lab3

with a redundant label lab3 and a redundant jump to it, a single label lab2 would have sufficed.

Now, consider a more elaborate example:

    if expr1 then 
        stmt1
    else 
        if expr2 then
            stmt2
        end
    end

which gets translated into:

    gen_cond expr1 lab1 lab2
    LABEL lab1;
        gen_stmt stmt1
    JUMP lab3;
    LABEL lab2;
        gen_cond expr2 lab4 lab5;
        LABEL lab4;
            gen_stmt stmt2
        JUMP lab6;
        LABEL lab5;
        LABEL lab6
    LABEL lab3

We get a similar problem, just amplified, with the horrifically inefficient ending sequence:

    JUMP lab6;
    LABEL lab5;
    LABEL lab6;
    LABEL lab3

Another nice optimization idea would be to create a translation function which is
semantically equivalent to:

    gen_cond_false expr1 label = 
        let t = label() in 
            SEQ [gen_cond expr1 t label;
                 LABEL t]

Which would allow rewriting the code as:

    gen_cond_false expr1 lab2
        gen_stmt stmt1
    JUMP lab3;
    LABEL lab2;
        gen_cond_false expr2 lab5;
            gen_stmt stmt2
        JUMP lab6;
        LABEL lab5;
        LABEL lab6
    LABEL lab3

Allowing the use of less labels in the more trivial cases as well as tidying up the
high level code structure.

-----------------------------------------------------------------------------------------

(b) We'd want to do two main things:

1. Two adjacent LABELs get turned into a single LABEL, serving the same function.
This requires replacing all occurrences of one label by the other one.

2. Sequences of the form

    JUMP label
    LABEL label

get removed.

These two optimizations alone turn the later code into:

    gen_cond expr1 lab1 lab2
    LABEL lab1;
    gen_stmt stmt1
    JUMP lab5;
    LABEL lab2;
    gen_cond expr2 lab4 lab5;
    LABEL lab4;
    gen_stmt stmt2
    LABEL lab5;
    
Most of the time also eliminating labels lab1 and lab4, in the spirit of gen_cond_false.


-----------------------------------------------------------------------------------------


2.7

(a) Abstract syntax:

type stmt =
    ...
  | WhileStmt of (expr * stmt) list
  | Loop of stmt
  | Exit
  

Parser:

stmts:
    ...
  | WHILE expr DO stmts while_elsif    { WhileStmt (($2, $4) :: $5) } 
  | LOOP stmts END                     { LoopStmt $2 }
  | EXIT                               { ExitStmt }
  
while_elsif:
    END                                { [] }
  | ELSIF expr DO stmts while_elsif    { ($2, $4) :: $5 }
  
-----------------------------------------------------------------------------------------

(b) Code generation:

let rec gen_stmt s exit_lab =
  match s with
      ...
    | WhileStmt lst ->
      let init_lab = label () in
      let expand (e, s) =
        let lbl = label () and nxt_lab = label () in
        SEQ [gen_cond e lbl nxt_lab;
             gen_stmt s exit_lab
             JUMP init_lab;
             LABEL nxt_lab]
      in
        SEQ [LABEL init_lab;
             SEQ (List.map expand lst) ]
    | LoopStmt body ->
      let lab1 = label () and lab2 = label () in
        SEQ [LABEL lab1;
             gen_stmt body lab2;
             JUMP lab1;
             LABEL lab2]
    | ExitStmt ->
        JUMP exit_lab

-----------------------------------------------------------------------------------------

(c) First code:

while x > y do
    x := x - y
elsif x < y do
    y := y - x
end

Generated code would be (with some appropriate friendlier label names):

LABEL init_lab1
    
    ! gen_cond x > y lbl2 nxt_lab3;
    LDLW -4;
    LDLW -8;
    JGT lbl2
    JUMP nxt_lab3
    
    LABEL lbl2;
    ! gen_stmt x := x - y
    LDLW -4;
    LDLW -8
    MINUS
    STLW -4;
    
    JUMP init_lab1;
    LABEL nxt_lab3;
    
    ! gen_cond x < y lbl4 nxt_lab5
    LDLW -4;
    LDLW -8;
    JLT lbl4;
    JUMP nxt_lab5
    
    LABEL lbl4
    ! get_stmt y := y - x
    LDLW -8;
    LDLW -4;
    MINUS;
    STLW -8;
    
    JUMP init_lab1
    LABEL nxt_lab5

Second code:

loop
    if x > y then
        x := x - y
    elsif x < y then
        y := y - x
    else
        exit
    end
end

Generated code would be (with some appropriate friendlier label names):

LABEL init_lab1
    ! gen_cond x > y lab3 lab4
    LDGW -4
    LDGW -8
    JGT lab3
    JUMP lab4
    
    LABEL lab3
        ! gen_stmt x := x - y
        LDLW -4
        LDLW -8
        MINUS
        STLW -4
    JUMP lab5
    LABEL lab4
        ! gen_cond x < y lab6 lab7
        LDGW -4
        LDGW -8
        JLT lab6
        JUMP lab7
        
        LABEL lab6
        JUMP lab8
        LABEL lab7
            JUMP lab2
        LABEL lab8
    LABEL lab5
JUMP init_lab1
LABEL lab2

-----------------------------------------------------------------------------------------

(d) The main inefficiencies here are:

(1) Duplicate labels (at the same place in the code), e.g.:

    LABEL lab8
    Label lab5

Which should grouped into equivalence classes by the peephole optimizer, thus turning the above into:

    LABEL lab5

and changing all occurrences of lab8 into occurrences of lab5.

(2) and "redirection" jumps, e.g.:

    LABEL lab5
    JUMP init_lab1

Which could be optimized by removing lab5 and changing all occurrences of JUMP lab5 into:

    JUMP init_lab1

These two optimizations remove most of the inefficiency of the second generated code.


-----------------------------------------------------------------------------------------


2.8 
(a) Abstract syntax:

type expr = 
    ...
  | IfExpr of expr * expr * expr

There are ambiguities such as:

    if i >= 0 then j else (j + 1) vs.
    (if i >= 0 then j else j) + 1

which should be correctly taken care of. To do this, we'll always parse the bracket-less
version of the above two expressions into the former. In other words, the conditional
operator will have the highest precedence, even over relational operators.
What follows are production rules for parsing the conditional operator in an unambiguous way
while offering maximum flexibility to the programmer:

expr :
    simple                                  { $1 }
  | expr_not_end_if RELOP simple            { Binop($2, $1, $3) }

expr_not_end_if :
    simple_not_end_if                       { $1 }
  | expr_not_end_if RELOP simple_not_end_if { Binop($2, $1, $3) }

simple :
    term                                    { $1 }
  | simple_not_end_if ADDOP term            { Binop($2, $1, $3) }
  | simple_not_end_if MINUS term            { Binop(Minus, $1, $3) };

simple_not_end_if :
    term_not_end_if                         { $1 }
  | simple_not_end_if ADDOP term_not_end_if { Binop($2, $1, $3) }
  | simple_not_end_if MINUS term_not_end_if { Binop(Minus, $1, $3) };

term :
    factor                              { $1 }
  | term_not_end_if MULOP factor        { Binop ($2, $1, $3) };

term_not_end_if :
    factor_not_end_if                       { $1 }
  | term_not_end_if MULOP factor_not_end_if { Binop ($2, $1, $3) };

factor :
    name                                { Variable $1 }
  | NUMBER                              { Constant $1 }
  | MONOP factor                        { Monop ($1, $2) }
  | MINUS factor                        { Monop (Uminus, $2) }
  | LPAR expr RPAR                      { $2 } ;
  | IF expr THEN expr ELSE expr         { IfExpr($2, $4, $6) };

factor_not_end_if :
    name                                { Variable $1 }
  | NUMBER                              { Constant $1 }
  | MONOP factor_not_end_if             { Monop ($1, $2) }
  | MINUS factor_not_end_if             { Monop (Uminus, $2) }
  | LPAR expr RPAR                      { $2 };

-----------------------------------------------------------------------------------------
  
(b)
  
let rec gen_expr =
  function
      ...
    | IfExpr (cond, thn, els) ->
        let els_lab = label () and ext_lab = label () in
          SEQ [gen_expr cond;
               CONST 0;
               JUMPC (Eq, els_lab);
               gen_expr thn;
               JUMP ext_lab;
               LABEL els_lab;
               gen_expr els;
               LABEL ext_lab]

let rec gen_cond e tlab flab =
  match e with
      ...
    | IfExpr (cond, thn, els) ->
        let els_lab = label () and ext_lab = label () in
        SEQ [gen_expr cond;
             CONST 0;
             JUMPC (Eq, els_lab);
             gen_cond thn tlab flab;
             JUMP ext_lab;
             LABEL els_lab;
             gen_cond els tlab flab;
             LABEL ext_lab]
             
-----------------------------------------------------------------------------------------

(c) The translation of:

    if (if i >= 0 then a[i] > x else false) then
        i := i+1
    end

is:

    LDGW i
    CONST 0
    GEQ
    CONST 0
    JEQ els_lab
    
    GLOBAL a
    LDGW i
    CONST 4
    TIMES
    OFFSET
    LOADW
    LDGW x
    
    JGT L1
    JUMP L2
    
    JUMP ext_lab
    LABEL els_lab
    JUMP L2
    LABEL ext_lab
    
    LABEL L1
    LDGW i
    CONST 1
    PLUS
    STGW i
    JUMP L3
    LABEL L2
    LABEL L3

While the translation of:

    if i >= 0 and a[i] > x then
        i := i + 1
    end

is:

    LDGW i
    CONST 0
    JGEQ l
    JUMP L2
    LABEL l
    
    GLOBAL a
    LDGW i
    CONST 4
    TIMES
    OFFSET
    LOADW
    LDGW x
    
    JGT L1
    JUMP L2    
    
    LABEL L1
    LDGW i
    CONST 1
    PLUS
    STGW i
    JUMP L3
    LABEL L2
    LABEL L3
    
There are a few peephole optimizations one may do in order to make the first variant
as efficient as the second:

1. Turn 

    GEQ
    CONST 0
    JEQ els_lab

into

    JLT els_lab

    
2. Merge adjacent labels into a single label and remove unused labels.

3. Notice the construct:

    LABEL els_lab
    JUMP L2
    
This shows that all instances of
    
    JUMP els_lab

can be turned into 
    
    JUMP L2

And thus els_lab can be eliminated from the code.

4. Instances of the form:

    JUMP L1
    JUMP L2

can be turned into:

    JUMP L1
    
These 4 optimizations have the effect of optimizing both codes and vastly decreasing
the gap between them.


-----------------------------------------------------------------------------------------


3.1

LDGW s   ! Load value of s
LDGW q   ! Load pointer q
!OFFSET 0
LOAD     ! Data stored at q
PLUS
STGW s   ! s := s + q -> data
LDGW q
OFFSET 4
LOAD     ! Next stored at q
STGW q   ! q := q -> next


-----------------------------------------------------------------------------------------


3.2 

There are quite a few changes to be made:

In tree.ml / tree.mli:

and stmt = 
 ...
  | LocalInStmt of decl list * stmt

let rec fStmt = 
  function
      ...
    | LocalInStmt (ds, s) ->
        fMeta "LocalInStmt_($, $)" [fList(fDecl) ds; fStmt s]
    

In lexer.mll:


let kwtable = 
  make_hash 64
    [ ... ("local", LOCAL); ("in", IN) ]

    
In parser.mly:


%token                  ... LOCAL IN

stmt :  
    ...
  | LOCAL decls IN stmts END            { LocalInStmt ($2, $4) }


In dict.ml / dict.mli:


(* |overwrite_define| -- add / overwrite a definition *)
let overwrite_define d (Env e) =
  Env (IdMap.add d.d_tag d e)

  
In check.ml:


(* |add_overwrite_def| -- add / overwirte defintion to env, *)
let add_overwrite_def d env =
  overwrite_define d env 

let rec check_stmt s env =
  match s with
  ...
  | LocalInStmt (ds, s) ->
    let env1 = check_overwrite_decls ds env in
      check_stmt s env1
 
(* |cnt_locals| -- Number of local variables created *)
let cnt_locals = ref 0

(* |get_new_local| -- Get new index of possible local variable *)
let get_new_local () =
  cnt_locals := !cnt_locals + 1;
  !cnt_locals

(* |check_overwrite_decl| -- check declaration and return extended
   environment, overwriting any recurring defintitions *)
let check_overwrite_decl (Decl (vs, t)) env0 =
  let declare x env =
    let lab = sprintf "__$$" [fStr x.x_name; fNum (get_new_local ())] in
    let d = make_def x.x_name t lab in
    x.x_def <- Some d; add_overwrite_def d env in
      accum declare vs env0

(* |check_overwrite_decls| -- check a sequence of declarations, using overwrite semantics *)
let check_overwrite_decls ds env0 =
  accum check_overwrite_decl ds env0
  

In kgen.ml:

let rec gen_stmt =
  function
      ...
    | LocalInStmt (ds, s) ->
      List.iter gen_decl ds;  (* Iterative style, like the rest of directive
                                 code generation *)
      gen_stmt s
    

Here is some test code to show this works:


(* lab2/test_let.p *)

var x, y: integer;

begin
  x := 3;
  y := 4;
  print x; newline;
  print y; newline;
  local
    var x: integer;
  in
    x := 0;
    print x; newline;
    print y; newline;
    local
      var x, y: integer;
    in
      x := -1;
      y := -2;
      print x; newline;
      print y; newline;
    end;
    print x; newline;
    print y; newline;
  end;
  print x; newline;
  print y; newline;
end.

(*<<
 3
 4
 0
 4
 -1
 -2
 0
 4
 3
 4
>>*)


-----------------------------------------------------------------------------------------


3.4
Doing a perfect job is certainly at least NP-complete. Consider the following code:

...
if P(X) then
    Y := 0;
end;
print Y;
...

If P(X) is a tautology, then we can safely assume that Y will always be initialized
before being used. But checking this is the same as checking whether !P(X) is satisfiable.
Which is equivalent with 3-SAT, an thus at least NP-Complete.

As a result, perfect checking is an unreasonable expectation, and a reasonable approximation
is to only take into account initializations which will obviously happen, such as those not
inside a complex if statement branch.

Also, note that a runtime check would be much easier to implement. But, indeed much costlier.

I will place the new function inside kgen.ml. I will assume I have some way marking an applied
occurrence of an identifier as "assignment initialized". The easiest way I can imagine is
through an abstracted BBST dictionary:

add_occ: name -> unit
check_occ: name -> boolean

A stateless version would have also worked, but it would take away from the exposition's clarity.
Then, our sanity check function works like this:

let get_def_var_in_expr e =
  match e.e_guts with
    Variable x -> get def x
  | _ -> failwith "left side of assignment not a variable"
  
and rec check_init_stmt =
  function
    ...
  | Assign (v, e) ->
    let d = get_def_var_in expr v in
      add_occ d;
      check_init_expr e;
  | Skip ->
      ()
  | Print e ->
      check_init_expr e
  | WhileStmt (test, body) ->
      check_init_expr test;
      check_init_stmt body
    ...

and rec check_init_expr =
  function
    Variable x ->
      if not (check_occ x) then
        failwith "uninitialized variable detected"
      else
        ()
  | Constant x ->
      ()
  | Monop (w, e1) ->
      check_init_expr e1;
      check_init_expr e2
